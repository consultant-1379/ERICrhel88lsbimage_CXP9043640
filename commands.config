# Amend grub.cfg
#/bin/sed  -i 's/systemd.log_target=kmsg/systemd.log_level=debug systemd.log_target=kmsg/g' /boot/grub2/grub.cfg
##### Start with yum #####
yum repolist
/bin/mkdir -p /var/log/sso
yum update -y --disablerepo=drop_repo_1

# BEGIN TORF-243086 - Investigate rngd.service failed (Hardware RNG Entropy Gatherer Daemon)
systemctl disable rngd.service
# END TORF-243086

##### sysctl.conf #####

# BEGIN TORF-178820 - Fix port collision introduced by TORF-103903
# BEGIN TORF-514451 - Update port range in lsb image.
echo "#TORF-178820 - Restrict ephemeral port range to prevent conflict with NFS" >>/etc/sysctl.conf
echo "net.ipv4.ip_local_port_range = 32810    60999" >>/etc/sysctl.conf
# END TORF-178820

# BEGIN TORF-239129 - Prevent collision with clustered counter and lock mutlicast ports
echo "#TORF-239129 - Prevent collision with clustered counter and lock mutlicast ports" >>/etc/sysctl.conf
echo 'net.ipv4.ip_local_reserved_ports = 12987,55181,55511,55571,50691,53689,52679,58170,58171,58172,50558,56231,56234,54402,54502,55502'>> /etc/sysctl.conf
# END TORF-514451
# END TORF-239129

# BEGIN TORF-149187 - Configure RHEL 7 lsb image for core dumps
# Configure for Core Dumps
# BEGIN TORF-670036 - [RHEL8] generate rhel8 lsb qcow2
sed -i 's/^.\?DefaultLimitCORE=.*$/DefaultLimitCORE=infinity/g' /etc/systemd/system.conf
systemctl daemon-reexec
# END TORF-670036
sed -i '$ i * soft core unlimited' /etc/security/limits.conf
sed -i '$a#Configuring Core Dumps' /etc/sysctl.conf
sed -i '$akernel.core_uses_pid = 1' /etc/sysctl.conf
sed -i '$akernel.core_pattern = /ericsson/enm/dumps/core.%h.%e.pid%p.usr%u.sig%s.tim%t' /etc/sysctl.conf
sed -i '$afs.suid_dumpable = 2' /etc/sysctl.conf
sed -i '$a# Configuring vm.swappiness' /etc/sysctl.conf
sed -i '$avm.swappiness = 10' /etc/sysctl.conf
# END TORF-149187

# BEGIN TORF-128558 - RHEL7 KVM - FD limit and socket buffer settings must be increased
# Set default socket buffer settings.
echo 'net.core.rmem_max = 5242880' >> /etc/sysctl.conf
echo 'net.core.wmem_max = 655360' >> /etc/sysctl.conf
echo 'net.core.rmem_default = 5242880' >> /etc/sysctl.conf
echo 'net.core.wmem_default = 655360' >> /etc/sysctl.conf
echo 'vm.min_free_kbytes = 262144' >> /etc/sysctl.conf
# END TORF-128558

# Set net.ipv4.conf.all.arp_filter=1 in /etc/sysctl.conf
sed -i '$anet.ipv4.conf.all.arp_filter = 1' /etc/sysctl.conf

# BEGIN TORF-171345 - Commands.config added gc_thresh3 = 2048
# BEGIN TORF-416803 - Commands.config added gc_thresh3 = 4096
# Increase the ARP Cache size - Neighbour Table - Garbage Collection Threshold
# gc_thresh for IPv6
sed -i '$anet.ipv6.neigh.default.gc_thresh3 = 4096' /etc/sysctl.conf
# END TORF-416803
# END TORF-171345

# BEGIN TORF-178820 - Fix port collision introduced by TORF-103903
sysctl -p
# END TORF-178820

##### Configuration #####

# Make journal logs persistent
/bin/mkdir -p /var/log/journal
/bin/sed -i 's/#Storage.*/Storage=persistent/1' /etc/systemd/journald.conf
/bin/sed -i 's/#SystemMaxUse.*/SystemMaxUse=40M/1' /etc/systemd/journald.conf
/bin/sed -i 's/#SystemMaxFileSize.*/SystemMaxFileSize=10M/1' /etc/systemd/journald.conf
/bin/sed -i 's/#RuntimeMaxUse.*/RuntimeMaxUse=40M/1' /etc/systemd/journald.conf
/bin/sed -i 's/#RuntimeMaxFileSize.*/RuntimeMaxFileSize=10M/1' /etc/systemd/journald.conf

# BEGIN TORF-103903 - Fix the NFS service daemon ports
# BEGIN TORF-670036 - [RHEL8] generate rhel8 lsb qcow2
sed -i '/^\[statd\]/,/^\[/{s/[# ]*port=.*/port=662/g}' /etc/nfs.conf
sed -i '/^\[statd\]/,/^\[/{s/[# ]*outgoing-port=.*/outgoing-port=2020/g}' /etc/nfs.conf
sed -i '/^\[mountd\]/,/^\[/{s/[# ]*port=.*/port=892/g}' /etc/nfs.conf
sed -i '/^\[lockd\]/,/^\[/{s/[# ]*port=.*/port=32803/g}' /etc/nfs.conf
sed -i '/^\[lockd\]/,/^\[/{s/[# ]*udp-port=.*/udp-port=32769/g}' /etc/nfs.conf
# END TORF-670036
# END TORF-103903

# chrony Updates
sed -i 's/server */#server */g' /etc/chrony.conf
echo "server ntp-server1 iburst" >> /etc/chrony.conf
echo "server ntp-server2 iburst" >> /etc/chrony.conf
echo "server ntp-server3 iburst" >> /etc/chrony.conf
echo "server ntp-server4 iburst" >> /etc/chrony.conf

# BEGIN TORF-670036 - [RHEL8] generate rhel8 lsb qcow2
/bin/systemctl enable chronyd
/bin/systemctl restart chronyd
# END TORF-670036

# Increase soft and hard limits of open files
sed -i '$ i\*           -       nofile          10240' /etc/security/limits.conf
sed -i '$ i\*           -       nproc           10240' /etc/security/limits.conf

# BEGIN TORF-670036 - [RHEL8] generate rhel8 lsb qcow2
cat &#60;&#60; EOF &#62; /etc/security/limits.d/20-nproc.conf
# Default limit for number of user's processes to prevent
# accidental fork bombs.
# See rhbz #432903 for reasoning.

*          soft    nproc     10240
root       soft    nproc     unlimited
EOF
# END TORF-670036

# Updating sar to run every 1 minute
# BEGIN TORF-670036 - [RHEL8] generate rhel8 lsb qcow2
sed -i 's/every 10 minutes/every 1 minute/' /usr/lib/systemd/system/sysstat-collect.timer
sed -i 's/OnCalendar=\*:00\/10/OnCalendar=\*:00\/1/' /usr/lib/systemd/system/sysstat-collect.timer
systemctl daemon-reload
# END TORF-670036

# Create Directory for OCF resource monitoring
/bin/mkdir -p /usr/lib/ocf/resource.d

# Update cloud.cfg to bring nfs mounts up before package-install
# Remove existing mount module
/bin/sed -i '/ - mounts/d' /etc/cloud/cloud.cfg
# Add mount module back in as first module run in cloud_config
/bin/sed -i '/cloud_config_modules:/a \ - mounts' /etc/cloud/cloud.cfg

# flush dead IP
/bin/sed -i '/^nameserver.*$/d' /etc/resolv.conf

# Remove cloud-init instances so it can be used on next customization
rm -rf /var/lib/cloud/instance
rm -rf /var/lib/cloud/instances

groupadd enm
useradd -genm -d /home/enmadm enmadm
groupadd -g 205 jboss
useradd -gjboss -u 308 -d /home/jboss_user jboss_user

# BEGIN TORF-172019 - Provide sudo rights for cloud-user in images
echo "cloud-user ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/cloud-user
# END TORF-172019

# BEGIN TORF-178106 - ability to reset VM root password to ATT preferred value
passwd -l root
# END TORF-178106

# iptables and nftables update
systemctl disable iptables
systemctl stop iptables
systemctl disable ip6tables
systemctl stop ip6tables
# BEGIN TORF-670036 - [RHEL8] generate rhel8 lsb qcow2
systemctl disable nftables
systemctl stop nftables

# firewalld update
systemctl disable firewalld
systemctl stop firewalld
# END TORF-670036

# BEGIN TORF-185577 - syslog log rotation by size
sed -i '/{/a\
    minsize 100M\
    daily\
    compress\
    nodelaycompress\
    rotate 14' /etc/logrotate.d/syslog
# END TORF-185577

# Make image openstack ready
sed -i '/^HWADDR/d' /etc/sysconfig/network-scripts/ifcfg-eth0
echo -n > /etc/udev/rules.d/70-persistent-net.rules
echo -n > /etc/udev/rules.d/75-persistent-net-generator.rules

##### ssh script #####

# BEGIN CIS-5229 - Set ssh configuration in ERICrhel6baseimage
# BEGIN TORF-138310 - No processes ran between 11:50 to 12:05
cat &lt;&lt;EOF &gt; /tmp/sshcommands
#!/bin/bash

CAT=/bin/cat
CHRONYC=/bin/chronyc
DATE=/bin/date
ECHO=/bin/echo
GREP=/bin/grep
SED=/bin/sed
SYSTEMCTL=/bin/systemctl
TEE=/bin/tee

HOSTS=/etc/hosts
LOG=/var/log/onboot.log
SSHDC=/etc/ssh/sshd_config

NTP_ALIAS="ntp-server"

log()
{
    \${ECHO} "\$( \${DATE} ): \$*" | \${TEE} -a \${LOG}
}

sysctl()
{
    local _action_=\$1
    local _service_=\$2
    log "\${_action_} \${_service_} ..."
    log "\$( \${SYSTEMCTL} \${_action_} \${_service_} 2>&amp;1 )"
    log "\${_action_} \${_service_}: Done"
}

log "Running onboot commands ..."
\${SED} -ir 's/^[#]\?PermitRootLogin .*/PermitRootLogin no/g' \${SSHDC}
log "Disabled root ssh login."
\${SED} -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' \${SSHDC}
\${SED} -i 's/PasswordAuthentication no/#PasswordAuthentication no/g' \${SSHDC}
log "Disabled ssh password authentication."
\${ECHO} "AcceptEnv SOURCE_IP" >> \${SSHDC}

# BEGIN TORF-706305 RHEL SSH server config change to use strong ciphers
\${GREP} -iq '^ciphers' \${SSHDC} || \${ECHO} -e 'ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com' >> \${SSHDC}
\${GREP} -iq '^macs' \${SSHDC} || \${ECHO} -e 'macs hmac-sha2-256,hmac-sha2-512' >> \${SSHDC}
\${GREP} -iq '^kexalgorithms' \${SSHDC} || \${ECHO} -e 'kexalgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256' >> \${SSHDC}
\${SED} -i 's/GSSAPIAuthentication yes/GSSAPIAuthentication no/g' \${SSHDC}
\${SED} -i 's/#GSSAPIKeyExchange no/GSSAPIKeyExchange no/g' \${SSHDC}
\${GREP} -iq '^ciphers' /etc/ssh/ssh_config || \${ECHO} -e 'ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com' >> /etc/ssh/ssh_config
\${GREP} -iq '^macs' /etc/ssh/ssh_config || \${ECHO} -e 'macs hmac-sha2-256,hmac-sha2-512' >> /etc/ssh/ssh_config
# END TORF-706305

# BEGIN TORF-688851 - Changes for CIS-CAT as sshd restart is needed
echo "This computer system is for authorized use only" > /etc/issue.net
\${GREP} -q '^Banner /etc/issue.net' /etc/ssh/sshd_config || echo -e 'Banner /etc/issue.net' >> /etc/ssh/sshd_config
# END TORF-688851
sysctl restart sshd

log "Waiting for \${HOSTS} ntp alias updates."
while true ; do
    \${GREP} -q \${NTP_ALIAS} \${HOSTS}
    if [ \$? -eq 0 ] ; then
        break
    else
        sleep 1
    fi
done
log "NTP aliases found in \${HOSTS}"
log "----------------"
log "\$( \${GREP} \${NTP_ALIAS} \${HOSTS} 2>&amp;1 )"
log "----------------"

sysctl stop crond
sysctl status crond
log "Synching chrony ..."
log "\$( \${CHRONYC} waitsync 5 2>&amp;1 )"
sysctl start crond
sysctl status crond
# BEGIN TORF-650646 - kdump service failing on all VMs
sysctl restart kdump
# END TORF-650646
sysctl reset-failed sysroot.mount
log "OnBoot command finished."
exit 0
EOF
chmod 755 /tmp/sshcommands
echo @reboot /tmp/sshcommands | crontab -
# END TORF-138310
# END CIS-5229

# BEGIN TORF-688821 - Timer Filers Permission Changes for CIS CAT
chmod og-rwx /etc/cron.d
chmod og-rwx /etc/cron.daily
chmod og-rwx /etc/cron.hourly
chmod og-rwx /etc/cron.monthly
chmod og-rwx /etc/cron.weekly
chmod u-x,og-rwx /etc/crontab
# END TORF-688821

# BEGIN TORF-516834 - start the dbus service on boot up if fail
cat &#60;&#60; EOF &#62;/usr/lib/systemd/system/dbus.service
[Unit]
Description=D-Bus System Message Bus
Documentation=man:dbus-daemon(1)
Requires=dbus.socket

[Service]
ExecStart=/usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
ExecReload=/usr/bin/dbus-send --print-reply --system --type=method_call --dest=org.freedesktop.DBus / org.freedesktop.DBus.ReloadConfig
OOMScoreAdjust=-900
Restart=always
RestartSec=3
EOF
# END TORF-516834

# Add a Service to run the contents of rc-local later
cat &#60;&#60; EOF &#62;/usr/lib/systemd/system/run-rc-local.service
[Unit]
Description=run-rc-local - run rc.local late
After=default.target
Conflicts=shutdown.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/var/tmp/run-rc-local start
TimeoutStartSec=30min

[Install]
WantedBy=default.target
EOF

/bin/systemctl daemon-reload
/bin/systemctl enable run-rc-local.service

cat &#60;&#60; EOF &#62;/var/tmp/run-rc-local
#!/bin/bash
start() {
   echo "# Run the contents of rc.local near the end of the boot process" > /var/tmp/run_rc_local.sh
   grep -v '^#' /etc/rc.local >> /var/tmp/run_rc_local.sh
   chmod +x /var/tmp/run_rc_local.sh
   echo "logger run_rc_local_finished" >> /var/tmp/run_rc_local.sh
   /var/tmp/run_rc_local.sh
}

case "\$1" in
    start)
        start
        ;;
    *)
        echo "Usage: bash {start}"
        ;;
esac
EOF
chmod +x /var/tmp/run-rc-local
# BEGIN TORF-670036 - [RHEL8] generate rhel8 lsb qcow2
semanage fcontext -a -t bin_t /var/tmp/run-rc-local
restorecon -v /var/tmp/run-rc-local
# END TORF-670036

# BEGIN TORF-675966 - start the rjio logging service on boot up
cat &#60;&#60; EOF &#62;/usr/lib/systemd/system/rjio-logging.service
[Unit]
Description=rjio-logging
After=default.target
Conflicts=shutdown.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/opt/ericsson/enm-configuration/bin/post_vm_startup.sh

[Install]
WantedBy=default.target
EOF

/bin/systemctl daemon-reload
/bin/systemctl enable rjio-logging.service
# END TORF-675966

mkdir -p /etc/systemd/system/cloud-init-local.service.d

# BEGIN TORF-711437 Post ENM upgrade VM hostname stays set as "cloudyone", which can cause mass service cleanstarts
cat &lt;&lt;EOF &gt; /etc/systemd/system/cloud-init-local.service.d/10-require-dbus.conf
[Unit]
Requires=dbus.service
After=dbus.service
EOF

#TORF-725247 set-hostname script
cat &#60;&#60; EOF &#62;/usr/bin/hostnamectl.custom
#!/bin/bash

# Define the path to the real hostnamectl command
HOSTNAMECTL=/usr/bin/hostnamectl.bkp

set_hostname() {
        vm_hostname=\$1
        \$HOSTNAMECTL set-hostname \$vm_hostname

        if [ \$? -ne 0 ]; then
        #set static hostname
        echo  \$vm_hostname > /etc/hostname

        #set transient hostname
        sysctl kernel.hostname=\$vm_hostname
        fi

        hostname | grep \$vm_hostname

        [[ \$? -eq 0 ]] || {
                           logger "Failed to set hostname"
                           exit 1
                           }

}

# Check if the first argument is 'set-hostname'
if [ "\$1" = "set-hostname" ]; then
    set_hostname "\$2"
else

# Call the real hostnamectl command with all the arguments
\$HOSTNAMECTL "\$@"

fi

mv /usr/bin/hostnamectl.bkp /usr/bin/hostnamectl
EOF

chmod +x /usr/bin/hostnamectl.custom
mv /usr/bin/hostnamectl /usr/bin/hostnamectl.bkp
mv /usr/bin/hostnamectl.custom /usr/bin/hostnamectl

# END TORF-711437

# BEGIN TORF-576816 - CIS-benchmark maturity level 2 for RHEL in ENM - lvsrouter
# BEGIN TORF-581934 - mounting of unused filesystems is disabled
echo 'install cramfs /bin/true' >> /etc/modprobe.d/cis.conf
echo 'install squashfs /bin/true' >> /etc/modprobe.d/cis.conf
echo 'install udf /bin/true' >> /etc/modprobe.d/cis.conf
# END TORF-581934

# BEGIN TORF-581934 - Disable USB storage
echo 'install usb-storage /bin/true' >> /etc/modprobe.d/cis.conf
# END TORF-581934

# BEGIN TORF-583958 - Ensure permissions on bootloader config are configured
chown root:root /boot/grub2/grub.cfg
chmod og-rwx /boot/grub2/grub.cfg
# END TORF-583958

# BEGIN TORF-581946 - Ensure dccp and sctp (uncommon network protocols) are disabled
echo 'install dccp /bin/true' >> /etc/modprobe.d/cis.conf
echo 'install sctp /bin/true' >> /etc/modprobe.d/cis.conf
# END TORF-581946

# BEGIN TORF-662589 - Solution Refinement For Group - Audit Log Collection (pENM Only)
# Ensure privileged commands are collected

echo "[main]" > /etc/dnf/plugins/post-transaction-actions.conf
echo "enabled = 0" >> /etc/dnf/plugins/post-transaction-actions.conf
echo "actiondir = /etc/dnf/plugins/post-transaction-actions.d/" >> /etc/dnf/plugins/post-transaction-actions.conf

mkdir -p /etc/dnf/plugins/post-transaction-actions.d

cat &lt;&lt; 'EOF' &gt; /etc/dnf/plugins/post-transaction-actions.d/audit.sh
#!/bin/bash
PACKAGE=$1

for file in $(rpm -ql $PACKAGE); do
  if [ -f &quot;$file&quot; ]; then

    if find &quot;$file&quot; \( -perm -4000 -o -perm -2000 \) -type f -print | grep -q &quot;$file&quot;; then
      RULE=&quot;-a always,exit -F path=$file -F perm=x -F auid&gt;=1000 -F auid!=4294967295 -k privileged&quot;

      if ! grep &quot;$RULE&quot; /etc/audit/rules.d/privileged.rules; then
        echo &quot;$RULE&quot; &gt;&gt; /etc/audit/rules.d/privileged.rules
      fi
    fi
  fi
done
/sbin/auditctl -R /etc/audit/rules.d/audit.rules
/sbin/auditctl -R /etc/audit/rules.d/privileged.rules
EOF

chmod +x /etc/dnf/plugins/post-transaction-actions.d/audit.sh
echo "*:install:/etc/dnf/plugins/post-transaction-actions.d/audit.sh \$action \$name" > /etc/dnf/plugins/post-transaction-actions.d/litp.action
chmod +x /etc/dnf/plugins/post-transaction-actions.d/litp.action

# Rules to exclude cron logs from audit.log
echo "-a never,user -F subj_type=crond_t" >> /etc/audit/rules.d/audit.rules
echo "-a exit,never -F subj_type=crond_t" >> /etc/audit/rules.d/audit.rules

# Ensure events that modify the system's Mandatory Access Controls are collected
echo "-w /etc/selinux/ -p wa -k MAC-policy" >> /etc/audit/rules.d/audit.rules
echo "-w /usr/share/selinux/ -p wa -k MAC-policy" >> /etc/audit/rules.d/audit.rules

# Ensure changes to system administration scope (sudoers) is collected
echo "-w /etc/sudoers -p wa -k scope" >> /etc/audit/rules.d/audit.rules
echo "-w /etc/sudoers.d/ -p wa -k scope" >> /etc/audit/rules.d/audit.rules

# Ensure discretionary access control permission modification events are collected
echo "-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod" >> /etc/audit/rules.d/audit.rules

# Ensure events that modify date and time information are collected
echo "-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b64 -S clock_settime -k time-change" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S clock_settime -k time-change" >> /etc/audit/rules.d/audit.rules
echo "-w /etc/localtime -p wa -k time-change" >> /etc/audit/rules.d/audit.rules

# Ensure events that modify the system's network environment are collected
echo "-a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale" >> /etc/audit/rules.d/audit.rules
echo "-w /etc/issue -p wa -k system-locale" >> /etc/audit/rules.d/audit.rules
echo "-w /etc/issue.net -p wa -k system-locale" >> /etc/audit/rules.d/audit.rules
echo "-w /etc/hosts -p wa -k system-locale" >> /etc/audit/rules.d/audit.rules
echo "-w /etc/sysconfig/network -p wa -k system-locale" >> /etc/audit/rules.d/audit.rules
# END TORF-662589

# BEGIN TORF-662686 - Ensure root PATH integrity
cat &lt;&lt; 'EOF' &gt;&gt; /root/.bash_profile
old_IFS=$IFS
IFS=&apos;:&apos;
new_PATH=&apos;&apos;

for dir in $PATH; do
  if [ -d &quot;$dir&quot; ]; then
    if [ -z &quot;$new_PATH&quot; ]; then
      new_PATH=&quot;$dir&quot;
    else
      new_PATH=&quot;$new_PATH:$dir&quot;
    fi
  fi
done

IFS=$old_IFS

export PATH=&quot;$new_PATH&quot;

DIRECTORY=&quot;/opt/Unisphere/bin&quot;

if [ -d &quot;$DIRECTORY&quot; ]; then
    chmod g-w &quot;$DIRECTORY&quot;
fi
EOF
# END TORF-662686

# END TORF-576816

# BEGIN TORF-662589 - Solution Refinement For Group - Audit Log Collection (pENM Only)
# Ensure events that modify user/group information are collected
echo "-w /etc/group -p wa -k identity" >> /etc/audit/rules.d/audit.rules
echo "-w /etc/passwd -p wa -k identity" >> /etc/audit/rules.d/audit.rules
echo "-w /etc/gshadow -p wa -k identity" >> /etc/audit/rules.d/audit.rules
echo "-w /etc/shadow -p wa -k identity" >> /etc/audit/rules.d/audit.rules
echo "-w /etc/security/opasswd -p wa -k identity" >> /etc/audit/rules.d/audit.rules

# Ensure file deletion events by users are collected
echo "-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete" >> /etc/audit/rules.d/audit.rules

# Ensure kernel module loading and unloading is collected
echo "-w /sbin/insmod -p x -k modules" >> /etc/audit/rules.d/audit.rules
echo "-w /sbin/rmmod -p x -k modules" >> /etc/audit/rules.d/audit.rules
echo "-w /sbin/modprobe -p x -k modules" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S init_module -S delete_module -k modules" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b64 -S init_module -S delete_module -k modules" >> /etc/audit/rules.d/audit.rules

# Ensure login and logout events are collected
echo "-w /var/log/lastlog -p wa -k logins" >> /etc/audit/rules.d/audit.rules
echo "-w /var/run/faillock/ -p wa -k logins" >> /etc/audit/rules.d/audit.rules

# Ensure session initiation information is collected
echo "-w /var/run/utmp -p wa -k session" >> /etc/audit/rules.d/audit.rules
echo "-w /var/log/wtmp -p wa -k logins" >> /etc/audit/rules.d/audit.rules
echo "-w /var/log/btmp -p wa -k logins" >> /etc/audit/rules.d/audit.rules

# Ensure successful file system mounts are collected
echo "-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts" >> /etc/audit/rules.d/audit.rules

# Ensure system administrator command executions (sudo) are collected
echo "-a always,exit -F arch=b64 -C euid!=uid -F euid=0 -F auid>=1000 -F auid!=4294967295 -S execve -k actions" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -C euid!=uid -F euid=0 -F auid>=1000 -F auid!=4294967295 -S execve -k actions" >> /etc/audit/rules.d/audit.rules

# Ensure discretionary access control permission modification events are collected
echo "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access" >> /etc/audit/rules.d/audit.rules
echo "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access" >> /etc/audit/rules.d/audit.rules

partitions=$(df --output=target | grep '/')

touch /etc/audit/rules.d/privileged.rules

for partition in $partitions; do
    if [ -d "$partition" ]; then
        find "$partition" -xdev \( -perm -4000 -o -perm -2000 \) -type f | \
        awk '{print "-a always,exit -F path="$1" -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged" }' >> /etc/audit/rules.d/privileged.rules
    fi
done

/sbin/auditctl -R /etc/audit/rules.d/privileged.rules
# END TORF-662589

# BEGIN TORF-599740 - 22.4 CIS-benchmark maturity level 2 for RHEL in ENM - lvsrouter
# BEGIN TORF-600236 - Ensure journald is configured to compress large log files:
sed -i 's/#Compress=.*/Compress=yes/' /etc/systemd/journald.conf
# END TORF-600236
# END TORF-599740

# BEGIN TORF-606134 - disabling unbound-anchor.timer
systemctl disable unbound-anchor.timer
# END TORF-606134

# BEGIN TORF-585590 - vda2 filesystem went above 85% post 22.07 upgrade
# BEGIN TORF-670036 - [RHEL8] generate rhel8 lsb qcow2
yum remove --oldinstallonly -y
# END TORF-670036
# END TORF-585590

# BEGIN TORF-589743 - Removing per-user journal log file creation
/bin/sed -i 's/#SplitMode.*/SplitMode=none/1' /etc/systemd/journald.conf
# END TORF-589743

# filetransfer service cleanstart issue
cat &#60;&#60; EOF &#62;/usr/local/bin/ssh-cleanup.sh
#!/bin/bash
echo "Starting ..." > /var/log/ssh-cleanup.log
for i in \$(grep bind /etc/fstab | cut -f2);do echo "\$i";lsof +f -- \$i;fuser -ck \$i;done >> /var/log/ssh-cleanup.log
echo "unmounting started" >> /var/log/ssh-cleanup.log
umount --recursive /home/smrs
umount /ericsson/tor/smrs
echo "umount completed" >> /var/log/ssh-cleanup.log
df -h >> /var/log/ssh-cleanup.log
echo "Exiting ..." >> /var/log/ssh-cleanup.log
EOF

chmod +x /usr/local/bin/ssh-cleanup.sh

cat &#60;&#60; EOF &#62;/usr/lib/systemd/system/ssh-cleanup.service
[Unit]
Description=kill all processes
After=network.target

[Service]
ExecStop=/usr/local/bin/ssh-cleanup.sh
Type=oneshot
RemainAfterExit=true

[Install]
WantedBy=multi-user.target
EOF

/bin/systemctl daemon-reload
/bin/systemctl enable ssh-cleanup.service --now

# BEGIN TORF-650646 - kdump service failing on all VMs
mkdir -p /etc/systemd/system/kdump.service.d/
cat &#60;&#60; EOF &#62;/etc/systemd/system/kdump.service.d/prestart.conf
[Unit]
After=ericsson-enm-dumps.mount
Requires=ericsson-enm-dumps.mount

[Service]
ExecStartPre=/bin/bash -c 'NFSDUMPDIR=\$(df -h | grep dumps | cut -f1 -d" ") &amp;&amp; [ ! -z "\$NFSDUMPDIR" ] &amp;&amp; sed -i "s|nfs \$|nfs \$NFSDUMPDIR|" /etc/kdump.conf'
EOF
# END TORF-650646

# BEGIN TORF-670036 - [RHEL8] generate rhel8 lsb qcow2
cat &#60;&#60; EOF &#62; /etc/profile.d/zzz_KCS_6192701.sh
unset -f \$(env | grep -oP "^BASH_FUNC_\K([^%]*)")
EOF
# END TORF-670036

# BEGIN TORF-688851 - Banner Changes for CIS CAT
echo -n > /etc/issue
echo "IF YOU ARE NOT AN AUTHORIZED USER, PLEASE EXIT IMMEDIATELY." > /etc/motd
# END TORF-688851

# BEGIN TORF-671212 - Cis-cat issues for audit configuration
grubby --update-kernel=ALL --args="audit_backlog_limit=8192"
grubby --update-kernel=ALL --args="audit=1"
# END TORF-671212
